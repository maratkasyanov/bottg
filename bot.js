const puppeteer = require('puppeteer');
const cron = require('node-cron');
const getRandomNumber = require('./fns');
const resultArr = require('./index')
const TelegramBot = require('node-telegram-bot-api');
const token = '7501233722:AAFT3LU4DG3W62W9TQ6SqJ64cKuEpDTKnMw';
const bot = new TelegramBot(token, { polling: true });
let result = []
let addedId = ['224611785']
let users = []
///adada12cbg
///lavochka_halyavochka
const channelId = "@adada12cbg"
console.log(resultArr)
async function sendParseDate() {
  if (addedId.length > 600) addedId = ['224611785']
  const fetchPromises = resultArr.map(async (elem) => {
    const url = elem[getRandomNumber(0, elem.length - 1)];

    const response = await fetch(url, {
      headers: {
        accept: "*/*",
        "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,la;q=0.6",
        "sec-ch-ua": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\"",
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": "\"Windows\"",
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "cross-site",
        "Referrer-Policy": "no-referrer-when-downgrade"
      },
      body: null,
      method: "GET"
    });
    console.log(response.status)
    const res = await response.json();
    let element = res.data.products.find((elem) => {
      return !addedId.includes(String(elem.id)) && elem.sizes[elem.sizes.length - 1].price.product / 100 <= 1000;
    })
    console.log(element)
    result.push([
      `\n\nüõí<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: <i>${element.name}</i>`,
      `\n*Id —Ç–æ–≤–∞—Ä–∞*:`,
      `${element.id}`,
      `\nüí≤<b>—Ü–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏</b>: <s>${element.sizes[element.sizes.length - 1].price.basic / 100}</s>`,
      `\nüí∏<b>—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π</b>: <b><u>${element.sizes[element.sizes.length - 1].price.product / 100}</u></b>`,
      `\nüîó<b>—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</b>: <a href="https://www.wildberries.ru/catalog/${element.id}/detail.aspx?targetUrl=SP">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>`
    ]);
  });

  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  await Promise.all(fetchPromises).then(async () => {
    console.log("–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –º–∞—Å—Å–∏–≤ result –∑–∞–ø–æ–ª–Ω–µ–Ω:");
    console.log(result); // –ó–¥–µ—Å—å –º–∞—Å—Å–∏–≤ result –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω
    addedId = Array.from(new Set(addedId))
    result = result.slice(0, 2)
    result.forEach((elem) => {
      addedId.push(elem[2]);
    });

    // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Puppeteer
    const browser = await puppeteer.launch();
    const puppeteerPromises = result.map(async (elem) => {

      const page = await browser.newPage();

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
      await page.goto(`https://www.wildberries.ru/catalog/${elem[2]}/detail.aspx?targetUrl=SP`, {
        waitUntil: 'networkidle2',
        timeout: 80000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageSrcs = await page.evaluate(() => {
        const images = document.querySelectorAll('.zoom-image-container img');
        return Array.from(images).map(img => img.src);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
      if (!elem.includes(`${imageSrcs[0]}`)) elem.push(`${imageSrcs[0]}`);
      console.log(imageSrcs[0], elem)
      // // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
      // await browser.close();
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Puppeteer
    await Promise.all(puppeteerPromises).then(async () => {
      await browser.close();
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      // users.forEach((elem) => {
      //   if (result.toString().trim().length > 0) {
      //     bot.sendMessage(elem, result.slice(0, 5).toString().replaceAll(',', '')); // –ú–∞—Å—Å–∏–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
      //   }
      // });
      console.log(result, '–•')

      result.forEach(async (elem)=>{
        await bot.sendPhoto(channelId, String(elem[elem.length-1]),{
          caption: String(elem.slice(0,1) + elem.slice(3,elem.length-1)),
          parse_mode: 'HTML' // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
      })
      })

      result = [];
    })



    // –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ result –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ res –≤ false
    console.log(addedId, addedId.length);
  })



}
cron.schedule('*/01 10-20 * * *', function () {
  console.log('–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç —Å 7 —É—Ç—Ä–∞ –¥–æ 7 –≤–µ—á–µ—Ä–∞');
  sendParseDate().catch(error => {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
  });
});

// bot.setMyCommands(
//   [
//     {
//       command: "/start",
//       description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
//     }
//   ]
// )
// bot.on('message', async (msg) => {
//   const chatId = msg.chat.id;
//   if (msg.text === '/start' || msg.text === '‚≠êÔ∏è –ù–∞—á–∞—Ç—å') {
//     if (!users.includes(chatId)) {
//       users.push(chatId)
//       sendParseDate()
//       bot.sendMessage(chatId, '*–±–æ—Ç –∑–∞–ø—É—â–µ–Ω*\n –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', {
//         parse_mode: "MarkdownV2"
//       });
//       result = []
//       cron.schedule('*/20 7-18 * * *', function () {
//         sendParseDate()
//       });
//     } else {
//       bot.sendMessage(chatId, '*–±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–µ—Ç*\n –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', {
//         parse_mode: "MarkdownV2"
//       });
//     }


//   }
// })
